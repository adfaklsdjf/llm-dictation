[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "llm-dictation"
version = "0.1.0"
description = "AI-powered speech-to-text with intelligent cleanup"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Brian Weaver", email = "brian@example.com"},
]
keywords = ["speech-to-text", "whisper", "llm", "dictation", "transcription"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Office/Business",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.9"
dependencies = [
    # Core ML and Audio Dependencies
    "faster-whisper>=1.0.0",  # Optimized Whisper for speech-to-text
    "pyaudio>=0.2.11",        # Cross-platform audio I/O
    
    # UI and Terminal
    "rich>=13.0.0",           # Beautiful terminal interfaces
    "click>=8.0.0",           # Command-line interface creation
    
    # LLM and Text Processing
    "openai>=1.0.0",          # OpenAI API for text cleanup
    "anthropic>=0.3.0",       # Anthropic Claude API
    "requests>=2.28.0",       # HTTP requests for API calls
    
    # System Integration
    "keyboard>=0.13.5",       # Global hotkey detection
    "pyperclip>=1.8.2",       # Clipboard operations
    "pydantic>=2.0.0",        # Data validation and settings
    
    # Development and Configuration
    "python-dotenv>=1.0.0",   # Environment variable management
    "pyyaml>=6.0",            # Configuration file support
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
]
local-llm = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
]
gpu = [
    "torch[cuda]>=2.0.0",
    "faster-whisper[cuda]>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/brianweaver/llm-dictation"
Repository = "https://github.com/brianweaver/llm-dictation"
Issues = "https://github.com/brianweaver/llm-dictation/issues"
Documentation = "https://github.com/brianweaver/llm-dictation#readme"

[project.scripts]
dictate = "src.main:main"
llm-dictation = "src.main:main"

[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml"]

# Development tools configuration

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pyaudio.*",
    "faster_whisper.*",
    "keyboard.*",
    "pyperclip.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]